//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""DebugActionMap"",
            ""id"": ""4dc26683-fee8-494c-8057-63126d590022"",
            ""actions"": [
                {
                    ""name"": ""ToggleDebugView"",
                    ""type"": ""Button"",
                    ""id"": ""4a27e432-9eb6-4ae7-857b-1183b4cfde5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""43a238ae-45c9-4954-a255-7bb12bff3f9d"",
                    ""path"": ""<Keyboard>/f3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleDebugView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player"",
            ""id"": ""1ef2d830-b207-4f63-81e6-da4a3fe74400"",
            ""actions"": [
                {
                    ""name"": ""RevertLastMove"",
                    ""type"": ""Button"",
                    ""id"": ""843e4e13-e14e-423d-b848-3453ea07bb7c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EndTurn"",
                    ""type"": ""Button"",
                    ""id"": ""bf47983b-0628-42ff-b2b9-b7cc44449dd2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FirstWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""b0fca9e7-864c-43a5-9692-2027b3f4a9be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""89293211-6db3-4adf-97c7-51b2b10693b8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Repair"",
                    ""type"": ""Button"",
                    ""id"": ""7d8b9aff-ce9e-4fd6-af82-eeedd89b8eff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""465f8bb8-255d-4c9d-ae51-806ce33e2efa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4b9035ef-9b6f-47fa-bc11-edd150c9a162"",
                    ""path"": ""<Mouse>/backButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RevertLastMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46e74ba2-e151-4d3b-a175-3ebc451691d1"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RevertLastMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f84a5f4e-d9ac-4696-8b3f-41fcb93c6046"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EndTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c31455bf-eb9b-41a1-b2a9-03127d912f3f"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b74a15c5-fed8-4152-992a-80ec05f30b47"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1185c7cb-9ebe-45df-8acb-536f61d95947"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Repair"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a28daf1-2b5c-40d7-ad8b-6daa48ed6a9a"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DebugActionMap
        m_DebugActionMap = asset.FindActionMap("DebugActionMap", throwIfNotFound: true);
        m_DebugActionMap_ToggleDebugView = m_DebugActionMap.FindAction("ToggleDebugView", throwIfNotFound: true);
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_RevertLastMove = m_Player.FindAction("RevertLastMove", throwIfNotFound: true);
        m_Player_EndTurn = m_Player.FindAction("EndTurn", throwIfNotFound: true);
        m_Player_FirstWeapon = m_Player.FindAction("FirstWeapon", throwIfNotFound: true);
        m_Player_SecondWeapon = m_Player.FindAction("SecondWeapon", throwIfNotFound: true);
        m_Player_Repair = m_Player.FindAction("Repair", throwIfNotFound: true);
        m_Player_Cancel = m_Player.FindAction("Cancel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DebugActionMap
    private readonly InputActionMap m_DebugActionMap;
    private List<IDebugActionMapActions> m_DebugActionMapActionsCallbackInterfaces = new List<IDebugActionMapActions>();
    private readonly InputAction m_DebugActionMap_ToggleDebugView;
    public struct DebugActionMapActions
    {
        private @Controls m_Wrapper;
        public DebugActionMapActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleDebugView => m_Wrapper.m_DebugActionMap_ToggleDebugView;
        public InputActionMap Get() { return m_Wrapper.m_DebugActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IDebugActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_DebugActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DebugActionMapActionsCallbackInterfaces.Add(instance);
            @ToggleDebugView.started += instance.OnToggleDebugView;
            @ToggleDebugView.performed += instance.OnToggleDebugView;
            @ToggleDebugView.canceled += instance.OnToggleDebugView;
        }

        private void UnregisterCallbacks(IDebugActionMapActions instance)
        {
            @ToggleDebugView.started -= instance.OnToggleDebugView;
            @ToggleDebugView.performed -= instance.OnToggleDebugView;
            @ToggleDebugView.canceled -= instance.OnToggleDebugView;
        }

        public void RemoveCallbacks(IDebugActionMapActions instance)
        {
            if (m_Wrapper.m_DebugActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDebugActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_DebugActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DebugActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DebugActionMapActions @DebugActionMap => new DebugActionMapActions(this);

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_RevertLastMove;
    private readonly InputAction m_Player_EndTurn;
    private readonly InputAction m_Player_FirstWeapon;
    private readonly InputAction m_Player_SecondWeapon;
    private readonly InputAction m_Player_Repair;
    private readonly InputAction m_Player_Cancel;
    public struct PlayerActions
    {
        private @Controls m_Wrapper;
        public PlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @RevertLastMove => m_Wrapper.m_Player_RevertLastMove;
        public InputAction @EndTurn => m_Wrapper.m_Player_EndTurn;
        public InputAction @FirstWeapon => m_Wrapper.m_Player_FirstWeapon;
        public InputAction @SecondWeapon => m_Wrapper.m_Player_SecondWeapon;
        public InputAction @Repair => m_Wrapper.m_Player_Repair;
        public InputAction @Cancel => m_Wrapper.m_Player_Cancel;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @RevertLastMove.started += instance.OnRevertLastMove;
            @RevertLastMove.performed += instance.OnRevertLastMove;
            @RevertLastMove.canceled += instance.OnRevertLastMove;
            @EndTurn.started += instance.OnEndTurn;
            @EndTurn.performed += instance.OnEndTurn;
            @EndTurn.canceled += instance.OnEndTurn;
            @FirstWeapon.started += instance.OnFirstWeapon;
            @FirstWeapon.performed += instance.OnFirstWeapon;
            @FirstWeapon.canceled += instance.OnFirstWeapon;
            @SecondWeapon.started += instance.OnSecondWeapon;
            @SecondWeapon.performed += instance.OnSecondWeapon;
            @SecondWeapon.canceled += instance.OnSecondWeapon;
            @Repair.started += instance.OnRepair;
            @Repair.performed += instance.OnRepair;
            @Repair.canceled += instance.OnRepair;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @RevertLastMove.started -= instance.OnRevertLastMove;
            @RevertLastMove.performed -= instance.OnRevertLastMove;
            @RevertLastMove.canceled -= instance.OnRevertLastMove;
            @EndTurn.started -= instance.OnEndTurn;
            @EndTurn.performed -= instance.OnEndTurn;
            @EndTurn.canceled -= instance.OnEndTurn;
            @FirstWeapon.started -= instance.OnFirstWeapon;
            @FirstWeapon.performed -= instance.OnFirstWeapon;
            @FirstWeapon.canceled -= instance.OnFirstWeapon;
            @SecondWeapon.started -= instance.OnSecondWeapon;
            @SecondWeapon.performed -= instance.OnSecondWeapon;
            @SecondWeapon.canceled -= instance.OnSecondWeapon;
            @Repair.started -= instance.OnRepair;
            @Repair.performed -= instance.OnRepair;
            @Repair.canceled -= instance.OnRepair;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IDebugActionMapActions
    {
        void OnToggleDebugView(InputAction.CallbackContext context);
    }
    public interface IPlayerActions
    {
        void OnRevertLastMove(InputAction.CallbackContext context);
        void OnEndTurn(InputAction.CallbackContext context);
        void OnFirstWeapon(InputAction.CallbackContext context);
        void OnSecondWeapon(InputAction.CallbackContext context);
        void OnRepair(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
    }
}
